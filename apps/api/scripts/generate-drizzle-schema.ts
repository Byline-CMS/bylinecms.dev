import { writeFileSync } from 'node:fs'
import { getAllCollectionDefinitions } from '@byline/byline/collections'
import { createTableSchema } from '@byline/byline/drizzle-builder'
import { format } from 'prettier'

// A little hack to get the column definitions from a table
const getTableColumns = (table: any) => {
  return table[Object.getOwnPropertySymbols(table).find(s => s.description === 'drizzle:Columns')!]
}

const generateSchemaFileContent = async () => {
  const collections = getAllCollectionDefinitions()
  const schemas = collections.map(c => createTableSchema(c))

  let content = `
    // This file is auto-generated by a script. Do not edit it manually.
    import { boolean, integer, json, pgTable, text, timestamp, uuid } from 'drizzle-orm/pg-core';\n\n
  `

  schemas.forEach(schema => {
    const tableName = schema[Object.getOwnPropertySymbols(schema).find(s => s.description === 'drizzle:Name')!]
    const columns = getTableColumns(schema)

    content += `export const ${tableName} = pgTable('${tableName}', {\n`

    Object.entries(columns).forEach(([columnName, columnDef]: [string, any]) => {
      // This is a simplified representation. A more robust solution might be needed
      // if you have more complex column types, indexes, or foreign keys.
      const type = columnDef.getSQLType()
      const notNull = columnDef.notNull ? '.notNull()' : ''
      const primaryKey = columnDef.primary ? '.primaryKey()' : ''
      let defaultValue = ''
      if (columnDef.default) {
        if (columnDef.default.isSQL) {
          defaultValue = '.defaultNow()' // Assuming only timestamp uses defaultNow()
        } else {
          defaultValue = `.default(${columnDef.default})`
        }
      }

      content += `  ${columnName}: ${type}('${columnName}')${notNull}${primaryKey}${defaultValue},\n`
    })

    content += '});\n\n'
  })

  return format(content, { parser: 'typescript' })
}

const run = async () => {
  console.log('Generating static Drizzle schema file...')
  const content = await generateSchemaFileContent()
  writeFileSync('./database/schema/_schema.ts', content)
  console.log('Static Drizzle schema file generated successfully.')
}

run().catch(e => {
  console.error('Failed to generate static Drizzle schema file:', e)
  process.exit(1)
})
